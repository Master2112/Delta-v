using System.Linq;
using System.Numerics;
using Content.Client.Message;
using Content.Client.Nyanotrasen.UserInterface;
using Content.Shared.DeltaV.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.DeltaV.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class TimerClockUiFragment : BoxContainer
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    public event Action<bool>? OnSync;
    private TimerClockUiState? _state;
    private TimerClockUiState.UiStates _currentState;

    private string _configuringLabel = "";
    private int _configuringHours = 0;
    private int _configuringMinutes = 0;
    private int _configuringSeconds = 0;

    public TimerClockUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        UpdateUI(TimerClockUiState.UiStates.TimerOverview);

        CreateTimerButton.OnPressed += _ => UpdateUI(TimerClockUiState.UiStates.NewTimer);
        StartTimerButton.OnPressed += _ => CreateNewTimer();
        CancelTimerButton.OnPressed += _ => UpdateUI(TimerClockUiState.UiStates.TimerOverview);

        AddHourButton.OnPressed += _ => AddHour();
        RemoveHourButton.OnPressed += _ => RemoveHour();

        AddMinuteButton.OnPressed += _ => AddMinutes(1);
        RemoveMinuteButton.OnPressed += _ => RemoveMinutes(1);
        AddFiveMinutesButton.OnPressed += _ => AddMinutes(5);
        RemoveFiveMinutesButton.OnPressed += _ => RemoveMinutes(5);

        AddSecondButton.OnPressed += _ => AddSeconds(1);
        RemoveSecondButton.OnPressed += _ => AddSeconds(1);
        AddFiveSecondsButton.OnPressed += _ => AddSeconds(5);
        RemoveFiveSecondsButton.OnPressed += _ => AddSeconds(5);
    }

    private void AddHour()
    {
        _configuringHours++;

        UpdateTimerPreviewLabel();
    }

    private void RemoveHour()
    {
        _configuringHours--;

        if (_configuringHours <= 0)
            _configuringHours = 0;

        UpdateTimerPreviewLabel();
    }

    private void AddMinutes(int amount)
    {
        _configuringMinutes += amount;

        while (_configuringMinutes >= 60)
        {
            _configuringMinutes -= 60;
            AddHour();
        }

        UpdateTimerPreviewLabel();
    }

    private void RemoveMinutes(int amount)
    {
        _configuringMinutes -= amount;

        while (_configuringMinutes < 0)
        {
            _configuringMinutes += 60;
            RemoveHour();
        }

        UpdateTimerPreviewLabel();
    }

    private void AddSeconds(int amount)
    {
        _configuringSeconds += amount;

        while (_configuringSeconds >= 60)
        {
            _configuringSeconds -= 60;
            AddMinutes(1);
        }

        UpdateTimerPreviewLabel();
    }

    private void RemoveSeconds(int amount)
    {
        _configuringSeconds += amount;

        while (_configuringSeconds < 0)
        {
            _configuringSeconds += 60;
            RemoveMinutes(1);
        }

        UpdateTimerPreviewLabel();
    }

    private void UpdateTimerPreviewLabel()
    {
        TimerSetupPreview.SetMarkup($"[bold][font size=23][color=#a4885c]{_configuringHours.ToString("D2")}:{_configuringMinutes.ToString("D2")}:{_configuringSeconds.ToString("D2")}[/color][/font][/bold]");
    }

    public void CreateNewTimer()
    {
        _state?.CreateNewTimer(_configuringLabel, _configuringHours, _configuringMinutes, _configuringSeconds);

        _configuringLabel = "";
        _configuringHours = 0;
        _configuringMinutes = 0;
        _configuringSeconds = 0;

        UpdateUI(TimerClockUiState.UiStates.TimerOverview);
    }

    public void UpdateState(TimerClockUiState state)
    {
        _state = state;
    }

    public void UpdateUI(TimerClockUiState.UiStates state)
    {
        _currentState = state;

        TimerOverview.Visible = state == TimerClockUiState.UiStates.TimerOverview;
        CreateTimer.Visible = state == TimerClockUiState.UiStates.NewTimer;
        /*
        else
        {
        Loc.GetString($"crime-assist-question-{state.ToString().ToLower()}");
            Title.SetMarkup("\n[bold][font size=23][color=#a4885c]" + GetCrimeNameLocString(state) + "[/color][/font][/bold]");
            Subtitle.SetMarkup("\n[font size=19]" + GetCrimeSeverityLocString(state) + "[/font]");
            Explanation.SetMarkup("\n[title]" + GetCrimeExplanationLocString(state) + "[/title]\n");
            Punishment.SetMarkup("[bold][font size=15]" + GetCrimePunishmentLocString(state) + "[/font][/bold]");

        TimeMinuteLeft? = 7b7b30
        TimeUp = 7b2e30
        }*/
    }
}
